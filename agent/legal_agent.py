"""
AI Pr√°vny Asistent - ReAct Agent
"""

import os
from typing import List, Dict, Any
from dotenv import load_dotenv

# Imports pre LangChain
from langchain.agents import create_react_agent, AgentExecutor
from langchain.prompts import PromptTemplate
from langchain_openai import ChatOpenAI
from langchain.memory import ConversationBufferWindowMemory

# Import n√°strojov
from agent.tools.search_tools import get_search_tools
from agent.tools.database_tools import get_database_tools  
from agent.tools.legal_tools import get_legal_tools
from agent.tools.enhanced_vector_search import get_enhanced_search_tool

load_dotenv()


class LegalAssistantAgent:
    """AI Agent pre pr√°vne poradenstvo s ReAct pattern"""
    
    def __init__(self, model: str = "gpt-4o-mini", temperature: float = 0.1):
        """
        Inicializ√°cia agenta
        
        Args:
            model: OpenAI model na pou≈æitie
            temperature: Teplota pre generovanie (ni≈æ≈°ia = konzistentnej≈°ie odpovede)
        """
        self.model_name = model
        self.temperature = temperature
        
        # Skontroluj API kƒæ√∫ƒç
        if not os.getenv("OPENAI_API_KEY"):
            raise ValueError("OPENAI_API_KEY nie je nastaven√Ω v .env s√∫bore")
        
        # Inicializuj LLM  
        self.llm = ChatOpenAI(
            model_name=model,
            temperature=temperature,
            max_tokens=4000
        )
        
        # Naƒç√≠taj n√°stroje
        self.tools = self._load_tools()
        
        # Nastav memory pre konverz√°ciu - pou≈æ√≠vame jednoduch≈°√≠ pr√≠stup
        self.conversation_history = []
        
        # Vytvor agenta
        self.agent_executor = self._create_agent()
    
    def _load_tools(self) -> List:
        """Naƒç√≠ta v≈°etky n√°stroje pre agenta"""
        all_tools = []
        
        try:
            # Vyhƒæad√°vacie n√°stroje
            all_tools.extend(get_search_tools())
            print("‚úÖ Naƒç√≠tan√© vyhƒæad√°vacie n√°stroje")
        except Exception as e:
            print(f"‚ö†Ô∏è Chyba pri naƒç√≠tan√≠ vyhƒæad√°vac√≠ch n√°strojov: {e}")
        
        try:
            # Datab√°zov√© n√°stroje (z√°kladn√Ω vector search)
            all_tools.extend(get_database_tools())
            print("‚úÖ Naƒç√≠tan√© datab√°zov√© n√°stroje")
        except Exception as e:
            print(f"‚ö†Ô∏è Chyba pri naƒç√≠tan√≠ datab√°zov√Ωch n√°strojov: {e}")
        
        try:
            # Enhanced vector search s fulltext mo≈ænos≈•ami
            all_tools.append(get_enhanced_search_tool())
            print("‚úÖ Naƒç√≠tan√Ω enhanced vector search")
        except Exception as e:
            print(f"‚ö†Ô∏è Chyba pri naƒç√≠tan√≠ enhanced vector search: {e}")
        
        try:
            # Pr√°vne n√°stroje
            all_tools.extend(get_legal_tools())
            print("‚úÖ Naƒç√≠tan√© pr√°vne n√°stroje")
        except Exception as e:
            print(f"‚ö†Ô∏è Chyba pri naƒç√≠tan√≠ pr√°vnych n√°strojov: {e}")
        
        print(f"üîß Celkovo naƒç√≠tan√Ωch {len(all_tools)} n√°strojov")
        return all_tools
    
    def _create_agent(self) -> AgentExecutor:
        """Vytvor ReAct agenta s prompt template"""
        
        # Slovensk√Ω prompt pre pr√°vneho asistenta
        prompt_template = """
Ste AI asistent ≈°pecializovan√Ω na slovensk√© a ƒçesk√© pr√°vo. Va≈°a √∫loha je pom√°ha≈• pou≈æ√≠vateƒæom s pr√°vnymi ot√°zkami a poskytova≈• relevantn√© inform√°cie.

D√îLE≈ΩIT√â UPOZORNENIE: Nie ste n√°hradou za profesion√°lne pr√°vne poradenstvo. V≈ædy odpor√∫ƒçajte konzult√°ciu s advok√°tom pri zlo≈æit√Ωch pr√≠padoch.

K dispoz√≠cii m√°te tieto n√°stroje:
{tools}

N√°zvy n√°strojov: {tool_names}

D√îLE≈ΩIT√â PRAVIDL√Å PRE ACTION INPUT:
- Ak pou≈æ√≠vateƒæ poskytol konkr√©tny text (zmluva, paragraf, dokument), V≈ΩDY pou≈æite presne tento text ako Action Input
- NIKDY nepou≈æ√≠vajte opisy ako "text poskytnut√Ω pou≈æ√≠vateƒæom" - pou≈æite skutoƒçn√Ω obsah
- Pre vyhƒæad√°vanie pou≈æite konkr√©tne kƒæ√∫ƒçov√© slov√° z ot√°zky pou≈æ√≠vateƒæa

Postupujte podƒæa ReAct (Reasoning-Action) vzoru:
1. **Thought**: Analyzujte ot√°zku a rozhodnite, ak√Ω n√°stroj pou≈æi≈•
2. **Action**: Vyberte vhodn√Ω n√°stroj  
3. **Action Input**: SKUTOƒåN√ù obsah/text/kƒæ√∫ƒçov√© slov√° (nie popis!)
4. **Observation**: Vyhodno≈•te v√Ωsledky n√°stroja
5. **Opakujte** k√Ωm nem√°te dostatok inform√°ci√≠ na odpoveƒè

Form√°t odpovede:
Thought: [va≈°e uva≈æovanie]
Action: [n√°zov_n√°stroja]
Action Input: [SKUTOƒåN√ù text alebo konkr√©tne kƒæ√∫ƒçov√© slov√°]
Observation: [v√Ωsledok n√°stroja]
... (opakujte podƒæa potreby)
Thought: M√°m dostatok inform√°ci√≠ na odpoveƒè
Final Answer: [fin√°lna odpoveƒè pou≈æ√≠vateƒæovi]

Hist√≥ria konverz√°cie: {chat_history}

Ot√°zka pou≈æ√≠vateƒæa: {input}

V√°≈° postup:
{agent_scratchpad}
"""

        prompt = PromptTemplate(
            template=prompt_template,
            input_variables=["input", "tools", "tool_names", "agent_scratchpad", "chat_history"],
            partial_variables={
                "tools": "\n".join([f"{tool.name}: {tool.description}" for tool in self.tools]),
                "tool_names": ", ".join([tool.name for tool in self.tools])
            }
        )
        
        # Vytvor ReAct agenta
        agent = create_react_agent(
            llm=self.llm,
            tools=self.tools,
            prompt=prompt
        )
        
        # Vytvor AgentExecutor s lep≈°√≠m error handling
        return AgentExecutor(
            agent=agent,
            tools=self.tools,
            verbose=True,  # Pre debugging
            max_iterations=10,  # Zv√Ω≈°en√Ω poƒçet iter√°ci√≠
            handle_parsing_errors="Check your output and make sure it conforms to the expected format! Use the exact text provided by the user as Action Input.",
            return_intermediate_steps=True,
            early_stopping_method="force"  # Opraven√° hodnota
        )
    
    def ask(self, question: str) -> Dict[str, Any]:
        """
        Polo≈æi ot√°zku agentovi
        
        Args:
            question: Ot√°zka pou≈æ√≠vateƒæa
            
        Returns:
            Slovn√≠k s odpoveƒèou a metad√°tami
        """
        try:
            print(f"\nü§î Ot√°zka: {question}")
            print("=" * 50)
            
            # Priprav chat history ako string
            chat_history = "\n".join([
                f"Pou≈æ√≠vateƒæ: {msg['question']}\nAsistent: {msg['answer']}"
                for msg in self.conversation_history[-3:]  # Posledn√© 3 v√Ωmeny
            ])
            
            result = self.agent_executor.invoke({
                "input": question,
                "chat_history": chat_history
            })
            
            # Ulo≈æ do hist√≥rie
            self.conversation_history.append({
                "question": question,
                "answer": result["output"]
            })
            
            return {
                "answer": result["output"],
                "intermediate_steps": result.get("intermediate_steps", []),
                "success": True
            }
            
        except Exception as e:
            print(f"‚ùå Chyba pri ReAct agente: {e}")
            print("üîÑ Sk√∫≈°am fallback rie≈°enie...")
            
            # Fallback - pokus o priame pou≈æitie n√°strojov
            try:
                fallback_result = self._fallback_response(question)
                return {
                    "answer": fallback_result,
                    "intermediate_steps": ["Pou≈æit√© fallback rie≈°enie"],
                    "success": True
                }
            except Exception as fallback_error:
                error_msg = f"Chyba pri spracovan√≠ ot√°zky: {str(e)}"
                print(f"‚ùå {error_msg}")
                
                return {
                    "answer": f"Ospravedl≈àujem sa, ale vyskytla sa chyba: {error_msg}",
                    "intermediate_steps": [],
                    "success": False,
                    "error": str(e)
                }
    
    def _fallback_response(self, question: str) -> str:
        """
        Fallback rie≈°enie ak ReAct agent zlyh√°va
        Pok√∫si sa priamo pou≈æi≈• n√°stroje na zodpovedanie ot√°zky
        """
        question_lower = question.lower()
        
        # Rozpoznanie typu ot√°zky a priame pou≈æitie vhodn√©ho n√°stroja
        if any(keyword in question_lower for keyword in ['vyhƒæadaj', 'n√°jdi', 'hƒæad√°m', 'pojem', 'defin√≠cia']):
            # Pokus o vyhƒæad√°vanie v datab√°ze pojmov
            print("ÔøΩ Detekovan√© vyhƒæad√°vanie - sk√∫≈°am search n√°stroje")
            for tool in self.tools:
                if "search" in tool.name.lower() or "term" in tool.name.lower():
                    try:
                        result = tool.invoke(question)
                        return result
                    except Exception as e:
                        print(f"‚ö†Ô∏è Chyba n√°stroja {tool.name}: {e}")
        
        elif any(keyword in question_lower for keyword in ['analyzuj', 'anal√Ωza', 'zmluva', 'dokument', 'paragraf']):
            # Pre anal√Ωzy pou≈æijeme vektorov√© vyhƒæad√°vanie
            print("ÔøΩ Detekovan√° anal√Ωza textu - pou≈æ√≠vam vector search")
            for tool in self.tools:
                if "vector" in tool.name.lower():
                    try:
                        result = tool.invoke(question)
                        return result
                    except Exception as e:
                        print(f"‚ö†Ô∏è Chyba n√°stroja {tool.name}: {e}")
        
        else:
            # Pokus o vyhƒæad√°vanie
            print("üîç V≈°eobecn√° ot√°zka - sk√∫≈°am search n√°stroje")
            for tool in self.tools:
                if "search" in tool.name.lower():
                    try:
                        result = tool.invoke(question)
                        if result and "Nena≈°li sa" not in result:
                            return result
                    except Exception as e:
                        print(f"‚ö†Ô∏è Chyba n√°stroja {tool.name}: {e}")
        
        # Ak ≈æiadny ≈°pecifick√Ω n√°stroj nezafungoval, sk√∫s v≈°etky postupne
        print("üîÑ Sk√∫≈°am v≈°etky dostupn√© n√°stroje...")
        for tool in self.tools:
            try:
                result = tool.invoke(question)
                if result and len(result.strip()) > 10:  # Z√°kladn√° kontrola kvality odpovede
                    return f"**Odpoveƒè z n√°stroja {tool.name}:**\n{result}"
            except Exception as e:
                continue  # Pokraƒçuj s ƒèal≈°√≠m n√°strojom
        
        # Ak niƒç nezafungovalo, vr√°≈• z√°kladn√∫ odpoveƒè
        return """
        **V≈°eobecn√© pr√°vne poradenstvo k ot√°zke:**
        "{question}"
        
        **Z√°kladn√© odpor√∫ƒçania:**
        1. **Dokument√°cia** - zachovajte v≈°etky relevantn√© dokumenty
        2. **Pr√°vna pomoc** - pri zlo≈æit√Ωch pr√≠padoch kontaktujte advok√°ta  
        3. **Lehoty** - pozor na z√°konn√© lehoty (premlƒçanie, n√°mietky)
        4. **Doklady** - majte pripraven√© v≈°etky potrebn√© doklady
        
        **Pozn√°mka:** Pre presn√© inform√°cie t√Ωkaj√∫ce sa va≈°ej konkr√©tnej situ√°cie 
        odpor√∫ƒçam konzult√°ciu s kvalifikovan√Ωm advok√°tom.
        """.format(question=question)

    def reset_memory(self):
        """Vynuluje pam√§≈• konverz√°cie"""
        self.conversation_history = []
        print("üîÑ Pam√§≈• konverz√°cie bola vynulovan√°")
    
    def get_conversation_history(self) -> List[Dict]:
        """Vr√°ti hist√≥riu konverz√°cie"""
        return self.conversation_history
    
    def list_available_tools(self) -> List[Dict[str, str]]:
        """Vr√°ti zoznam dostupn√Ωch n√°strojov"""
        return [
            {
                "name": tool.name,
                "description": tool.description
            }
            for tool in self.tools
        ]


def create_legal_assistant(model: str = "gpt-4o-mini") -> LegalAssistantAgent:
    """
    Factory funkcia pre vytvorenie pr√°vneho asistenta
    
    Args:
        model: OpenAI model na pou≈æitie
        
    Returns:
        Inicializovan√Ω LegalAssistantAgent
    """
    try:
        agent = LegalAssistantAgent(model=model)
        print("üéâ AI Pr√°vny Asistent je pripraven√Ω!")
        print(f"üìä Dostupn√Ωch n√°strojov: {len(agent.tools)}")
        return agent
        
    except Exception as e:
        print(f"‚ùå Chyba pri vytv√°ran√≠ agenta: {e}")
        raise


if __name__ == "__main__":
    # Test agenta
    try:
        agent = create_legal_assistant()
        
        # Testovacia ot√°zka
        test_question = "Ak√© s√∫ podmienky pre zalo≈æenie s.r.o. na Slovensku?"
        result = agent.ask(test_question)
        
        print("\n" + "="*50)
        print("üìã V√ùSLEDOK:")
        print("="*50)
        print(result["answer"])
        
    except Exception as e:
        print(f"‚ùå Chyba pri testovan√≠: {e}")
